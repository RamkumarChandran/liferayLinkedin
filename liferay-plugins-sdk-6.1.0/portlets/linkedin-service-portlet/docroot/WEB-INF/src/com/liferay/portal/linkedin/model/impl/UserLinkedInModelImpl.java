/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.portal.linkedin.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.linkedin.model.UserLinkedIn;
import com.liferay.portal.linkedin.model.UserLinkedInModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

/**
 * The base model implementation for the UserLinkedIn service. Represents a row in the &quot;Portal_UserLinkedIn&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.portal.linkedin.model.UserLinkedInModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link UserLinkedInImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see UserLinkedInImpl
 * @see com.liferay.portal.linkedin.model.UserLinkedIn
 * @see com.liferay.portal.linkedin.model.UserLinkedInModel
 * @generated
 */
public class UserLinkedInModelImpl extends BaseModelImpl<UserLinkedIn>
	implements UserLinkedInModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a user linked in model instance should use the {@link com.liferay.portal.linkedin.model.UserLinkedIn} interface instead.
	 */
	public static final String TABLE_NAME = "Portal_UserLinkedIn";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "linkedId", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table Portal_UserLinkedIn (id_ LONG not null primary key,companyId LONG,userId LONG,linkedId VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table Portal_UserLinkedIn";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.portal.linkedin.model.UserLinkedIn"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.portal.linkedin.model.UserLinkedIn"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.portal.linkedin.model.UserLinkedIn"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long LINKEDID_COLUMN_BITMASK = 2L;
	public static long USERID_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.portal.linkedin.model.UserLinkedIn"));

	public UserLinkedInModelImpl() {
	}

	public long getPrimaryKey() {
		return _id;
	}

	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_id);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return UserLinkedIn.class;
	}

	public String getModelClassName() {
		return UserLinkedIn.class.getName();
	}

	public long getId() {
		return _id;
	}

	public void setId(long id) {
		_id = id;
	}

	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	public String getLinkedId() {
		if (_linkedId == null) {
			return StringPool.BLANK;
		}
		else {
			return _linkedId;
		}
	}

	public void setLinkedId(String linkedId) {
		_columnBitmask |= LINKEDID_COLUMN_BITMASK;

		if (_originalLinkedId == null) {
			_originalLinkedId = _linkedId;
		}

		_linkedId = linkedId;
	}

	public String getOriginalLinkedId() {
		return GetterUtil.getString(_originalLinkedId);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public UserLinkedIn toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (UserLinkedIn)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
					UserLinkedIn.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	@Override
	public Object clone() {
		UserLinkedInImpl userLinkedInImpl = new UserLinkedInImpl();

		userLinkedInImpl.setId(getId());
		userLinkedInImpl.setCompanyId(getCompanyId());
		userLinkedInImpl.setUserId(getUserId());
		userLinkedInImpl.setLinkedId(getLinkedId());

		userLinkedInImpl.resetOriginalValues();

		return userLinkedInImpl;
	}

	public int compareTo(UserLinkedIn userLinkedIn) {
		long primaryKey = userLinkedIn.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		UserLinkedIn userLinkedIn = null;

		try {
			userLinkedIn = (UserLinkedIn)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = userLinkedIn.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		UserLinkedInModelImpl userLinkedInModelImpl = this;

		userLinkedInModelImpl._originalCompanyId = userLinkedInModelImpl._companyId;

		userLinkedInModelImpl._setOriginalCompanyId = false;

		userLinkedInModelImpl._originalUserId = userLinkedInModelImpl._userId;

		userLinkedInModelImpl._setOriginalUserId = false;

		userLinkedInModelImpl._originalLinkedId = userLinkedInModelImpl._linkedId;

		userLinkedInModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<UserLinkedIn> toCacheModel() {
		UserLinkedInCacheModel userLinkedInCacheModel = new UserLinkedInCacheModel();

		userLinkedInCacheModel.id = getId();

		userLinkedInCacheModel.companyId = getCompanyId();

		userLinkedInCacheModel.userId = getUserId();

		userLinkedInCacheModel.linkedId = getLinkedId();

		String linkedId = userLinkedInCacheModel.linkedId;

		if ((linkedId != null) && (linkedId.length() == 0)) {
			userLinkedInCacheModel.linkedId = null;
		}

		return userLinkedInCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", linkedId=");
		sb.append(getLinkedId());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("com.liferay.portal.linkedin.model.UserLinkedIn");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>linkedId</column-name><column-value><![CDATA[");
		sb.append(getLinkedId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = UserLinkedIn.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			UserLinkedIn.class
		};
	private long _id;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _linkedId;
	private String _originalLinkedId;
	private transient ExpandoBridge _expandoBridge;
	private long _columnBitmask;
	private UserLinkedIn _escapedModelProxy;
}